# Load libraries
library("ggplot2") # plotting
library("TDA") # persistent homology
library("gridExtra") # plotting in grid
# Sample and plot data
set.seed(42)
n <- 50
theta <- runif(2 * n, 0, 2 * pi)
ycenters <- c(0, 3)
df <- data.frame(x=cos(theta) + rnorm(2 * n, sd=0.1), y=rep(ycenters, each=n) + sin(theta) + rnorm(2 * n, sd=0.1))
ggplot(df, aes(x=x, y=y)) +
geom_point(size=1) +
coord_fixed() +
theme_bw()
# Persistent homology for connected components and cycles
filtration <- ripsFiltration(df, maxdimension=1, maxscale=max(dist(df)) / 2 + 0.1)
diag <- filtrationDiag(filtration, maxdimension=1, library="Dionysus", printProgress=TRUE)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE) +
vline(0.01)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE) +
abline(h=0.01)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE) +
abline(h=0.01)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE) +
abline(v=0.01)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE)
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE)
?plot.diag
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE,
abline(v=2))
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE,
abline(h=2))
plot(diag[["diagram"]], diagLim=c(0,  max(dist(df)) / 2 + 0.1), barcode=TRUE,
xlab("epsilon"))
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
library("TDA") # for adding cycles
# Load and plot data
df <- read.table("Data/Toy/Pikachu.csv", header=FALSE, sep=",")
colnames(df) <- c("x", "y")
ggplot(df, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw() +
coord_fixed()
# Conduct backbone pipeline
BCB <- backbone(df, eps=3.5, type="Rips")
# View boundary coefficients, pine, and backbone
EG <- get_edges2D(df, BCB$G)
Epine <- get_edges2D(df, BCB$pine)
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color='black') +
geom_point(size=2, aes(col=BCB$f)) +
geom_point(data=df[V(BCB$B)$name,], size=3, col="red") +
geom_segment(data=EBCB, aes(x=x1, y=y1, xend=x2, yend=y2), color='red', size=2) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
# View cost according to the number of leaves
ggplot(BCB$cost, aes(x=leaves, y=cost)) +
geom_line(aes(group=component, col=component)) +
geom_point(aes(group=component, col=component)) +
xlab("number of leaves") +
ylab("relative cost") +
theme_bw()
# Increase the total number of leaves
BCB <- get_new_leaves(BCB, leaves=16) # Will not include a tree with one node
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color='black') +
geom_point(size=2, aes(col=BCB$f)) +
geom_point(data=df[V(BCB$B)$name,], size=3, col="red") +
geom_segment(data=EBCB, aes(x=x1, y=y1, xend=x2, yend=y2), color='red', size=2) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
# Increase number of leaves component wise
BCB <- get_new_leaves(BCB, leaves=c(7, 4, 2, 2, 1))
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color='black') +
geom_point(size=2, aes(col=BCB$f)) +
geom_point(data=df[V(BCB$B)$name,], size=3, col='red') +
geom_segment(data=EBCB, aes(x=x1, y=y1, xend=x2, yend=y2), color='red', size=2) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
library("TDA") # for adding cycles
# Load and plot data
df <- read.table("Data/Toy/Pikachu.csv", header=FALSE, sep=",")
colnames(df) <- c("x", "y")
ggplot(df, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw() +
coord_fixed()
# Conduct backbone pipeline
BCB <- backbone(df, eps=3.5, type="Rips")
# View boundary coefficients, pine, and backbone
EG <- get_edges2D(df, BCB$G)
Epine <- get_edges2D(df, BCB$pine)
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color='black') +
geom_point(size=2, aes(col=BCB$f)) +
geom_point(data=df[V(BCB$B)$name,], size=3, col="red") +
geom_segment(data=EBCB, aes(x=x1, y=y1, xend=x2, yend=y2), color='red', size=2) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
EG
colnames(EG)
colnames(Epine)
colnames(EBCB)
BCB$B
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
library("randomcoloR") # branch assignment
# Load and plot data
df <- read.table("Data/Toy/curvY.csv", header=FALSE, sep=",")
colnames(df) <- c("x", "y")
ggplot(df, aes(x=x, y=y)) +
geom_point(size=3) +
theme_bw() +
coord_fixed()
# Conduct backbone pipeline
BCB <- backbone(df, eps=10, type="Rips", assign=TRUE)
# View boundary coefficients
EG <- get_edges2D(df, BCB$G)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_point(size=2, aes(col=BCB$f)) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
devtools::load_all() # source 'persistent_homology.R' function here
library("ggplot2") # plotting
PHG <- persistent_homology(df, path=path, do_cocycles=TRUE)
PHG$dgms[PHG$dgms[,1]==1,]
maxPersistingCycle <- 17
path <- "/home/robin/Documents/BCB/Python" # path to folder containing the Python script
path <- "/home/robin/Documents/BCB/Python" # path to folder containing the Python script
PHG <- persistent_homology(df, path=path, do_cocycles=TRUE)
df <- read.table("Data/Toy/Pikachu.csv", header=FALSE, sep=",")
