# Load libraries
devtools::load_all() # load BCB
library("igraphdata") # karate network
# Load and plot data
data(karate)
G <- upgrade_graph(karate)
V(G)$label.color <- rep("black", length(V(G)))
V(G)$label.color[c(1, length(V(G)))] <- "white"
set.seed(197)
layout <- layout.auto(G)
plot(G, layout=layout)
# Conduct backbone pipeline with ordinary LCC
f <- transitivity(G, type="local")
backbone <- backbone_pipe(G, f=f, method="hard", times=2)
# View LCC and LCC-pine
f[is.na(f)] <- 1
color_breaks <- c("blue", "green", "yellow")
V(G)$color <- colorRampPalette(color_breaks)(length(f))[rank(f)]
legend_colors <- colorRampPalette(color_breaks)(length(f))
legend_image <- rev(as.raster(matrix(legend_colors, ncol = 1)))
E(G)$color <- rep("gray", length(E(G)))
E(G)$color[get.edge.ids(G, as.integer(t(ends(backbone$B, E(backbone$B)))))] <- "red"
edge.width <- rep(1, length(E(G)))
edge.width[get.edge.ids(G, as.integer(t(ends(backbone$B, E(backbone$B)))))] <- 4
layout(matrix(1:2, ncol=2), width=c(2, 1), height=c(1, 1))
plot(G, layout=layout, edge.width=edge.width, vertex.size=25, vertex.label.cex=1.75)
plot(c(0,2), c(0,1), type="n", axes=FALSE, xlab="", ylab="", main="LCC")
text(x=1.5, y = seq(min(f), max(f), l=5), labels=seq(min(f), max(f), l=5), cex=1.5)
rasterImage(legend_image, 0, 0, 1, 1)
rand_color(10)
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
create_if_not_exists <- function(path) {
folder <- dirname(path)
dir.create(folder, recursive = TRUE, showWarnings = FALSE)
path
}
dataset_id <- "real/gold/cellbench-SC1_luyitian.rds"
dataset_location <- paste0("Data/Dynverse/datasets/", dataset_id)
curl::curl_download(
paste0("https://zenodo.org/record/1443566/files/", dataset_id),
create_if_not_exists(dataset_location)
)
cells_info <- read_rds(dataset_location) %>% add_prior_information()
cells_info <- readRDS(dataset_location) %>% add_prior_information()
cells_info <- readRDS(dataset_location)
cells_info
cells_info <- readRDS(dataset_location)
cell_levels <- c("H1975,H2228,HCC827", "H1975", "HCC827", "H2228")
fit$group <- factor(fit$group, levels = cell_levels)
fit <- cbind(data.frame(cmdscale(dist(cells_info$expression), k=2)), cells_info$grouping)
fit[,1] <- -fit[,1]
colnames(fit) <- c("x", "y", "group")
cell_levels <- c("H1975,H2228,HCC827", "H1975", "HCC827", "H2228")
fit$group <- factor(fit$group, levels = cell_levels)
cols <- c("H1975,H2228,HCC827"=rgb(250, 127, 113, maxColorValue = 255),
"H1975"=rgb(252, 179, 97, maxColorValue = 255),
"HCC827"=rgb(254, 254, 178, maxColorValue = 255),
"H2228"=rgb(178, 221, 104, maxColorValue = 255))
G <- graph_from_data_frame(cells_info$milestone_network)
V(G)$color <- cols
plot(G, layout=layout_as_tree, vertex.shape="rectangle", vertex.size=75, edge.arrow.size=0.25, edge.color="black")
dev.off()
G
plot(G, vertex.shape="rectangle", vertex.size=75, edge.arrow.size=0.25, edge.color="black")
cells_info <- readRDS("Data/Cell/Real/Cell_Data_Real")
fit <- cbind(data.frame(cmdscale(dist(cells_info$expression), k=2)), cells_info$grouping)
fit[,1] <- -fit[,1]
colnames(fit) <- c("x", "y", "group")
cell_levels <- c("MEF", "d2_intermediate", "d2_induced", "d5_intermediate", "d5_earlyiN", "Neuron", "Myocyte")
fit$group <- factor(fit$group, levels = cell_levels)
cols <- c("MEF"=rgb(250, 127, 113, maxColorValue = 255),
"d2_intermediate"=rgb(252, 179, 97, maxColorValue = 255),
"d2_induced"=rgb(254, 254, 178, maxColorValue = 255),
"d5_intermediate"=rgb(178, 221, 104, maxColorValue = 255),
"d5_earlyiN"=rgb(140, 210, 198, maxColorValue = 255),
"Neuron"=rgb(127, 176, 210, maxColorValue = 255),
"Myocyte"=rgb(189, 185, 217, maxColorValue = 255))
G <- graph_from_data_frame(cells_info$milestone_network)
V(G)$color <- cols
plot(G, vertex.shape="rectangle", vertex.size=75, edge.arrow.size=0.25, edge.color="black")
cells_info <- readRDS("Data/Cell/Real/Cell_Data_Real")
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
cells_info <- readRDS("Data/Cell/Real/Cell_Data_Real")
dataset4 <- read_rds("Data/Cell/Real/cellbench-SC1_luyitian") %>% add_prior_information()
# Load libraries
devtools::load_all() # load BCB
library("tidyverse") # read RDS files
dataset4 <- read_rds("Data/Cell/Real/cellbench-SC1_luyitian") %>% add_prior_information()
dataset3 <- readRDS("Data/Cell/Real/Cell_Data_Real") %>% add_prior_information()
# Load libraries
library("igraph")
library("tidyverse")
library("dynbenchmark")
library("gridExtra")
library("dplyr")
library("gdata")
# Make design for experiments
metrics <- c("correlation", "him", "featureimp_wcor", "F1_branches")
ks <- c(5, 10, 15, 20, 25)
dimreds <- c("pca", "diffusionmap")
methods <- list("slingshot", "paga")
methods_with_priors <- character()
for(k in ks){
for(dimred in dimreds){
methods[[length(methods) + 1]] <- BCB:::ti_bcb(k=k, dim=dim, dimred=dimred)
methods[[length(methods)]]$method$id <- paste("bcb-", "k", k, "-", dimred, sep="")
methods[[length(methods) + 1]] <- BCB:::ti_bcb(k=k, dim=dim, dimred=dimred)
methods[[length(methods)]]$method$id <- paste("bcb-", "k", k, "-", dimred, "-prior", sep="")
methods_with_priors <- c(methods_with_priors, methods[[length(methods)]]$method$id)
}
}
benchmark_fetch_results(local_output_folder="Data/Dynverse/results")
output <- benchmark_bind_results(local_output_folder="Data/Dynverse/results", load_models=FALSE) # set load_models=TRUE for confusion matrices
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
# Load and plot data
df <- read.table("Data/Toy/curvY.csv", header=FALSE, sep=",")
colnames(df) <- c("x", "y")
ggplot(df, aes(x=x, y=y)) +
geom_point(size=3) +
theme_bw() +
coord_fixed()
# Conduct backbone pipeline
BCB <- backbone(df, eps=10, type="Rips", assign=TRUE)
# Load libraries
devtools::load_all() # load BCB
library("ggplot2") # plotting
# Load and plot data
df <- read.table("Data/Toy/curvY.csv", header=FALSE, sep=",")
colnames(df) <- c("x", "y")
ggplot(df, aes(x=x, y=y)) +
geom_point(size=3) +
theme_bw() +
coord_fixed()
# Conduct backbone pipeline
BCB <- backbone(df, eps=10, type="Rips", assign=TRUE)
# View boundary coefficients
EG <- get_edges2D(df, BCB$G)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color='black', alpha=0.15) +
geom_point(size=2, aes(col=BCB$f)) +
scale_colour_gradientn(colours=topo.colors(7)) +
labs(col="BC") +
theme_bw() +
coord_fixed()
# View backbone and branch assignments
Epine <- get_edges2D(df, BCB$pine)
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color="black", alpha=0.1) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color="black", alpha=0.5, size=1) +
geom_point(size=3, fill=BCB$col, alpha=0.5, pch=21) +
geom_segment(data=EBCB, aes(x= x1, y=y1, xend=x2, yend=y2), col="black", size=2.75) +
geom_segment(data=cbind(EBCB, as.factor(BCB$branch)),
aes(x=x1, y=y1, xend=x2, yend=y2, col=as.factor(BCB$branch)), size=2) +
geom_point(data=df[V(BCB$B)$name,], fill=BCB$col[V(BCB$B)$name], size=5, pch=21) +
scale_color_manual(values=BCB$palette) +
guides(col = guide_legend(title="Path")) +
coord_fixed() +
theme_bw()
# View cost according to the number of leaves
ggplot(BCB$cost, aes(x=leaves, y=cost)) +
geom_line(aes(group=component, col=component)) +
geom_point(aes(group=component, col=component)) +
xlab("number of leaves") +
ylab("relative cost") +
theme_bw()
# Increase number of leaves
BCB <- get_new_leaves(BCB, leaves=3)
EBCB <- get_edges2D(df, BCB$B)
ggplot(df[names(V(BCB$G)),], aes(x=x, y=y)) +
geom_segment(data=EG, aes(x=x1, y=y1, xend=x2, yend=y2), color="black", alpha=0.1) +
geom_segment(data=Epine, aes(x=x1, y=y1, xend=x2, yend=y2), color="black", alpha=0.5, size=1) +
geom_point(size=3, fill=BCB$col, alpha=0.5, pch=21) +
geom_segment(data=EBCB, aes(x= x1, y=y1, xend=x2, yend=y2), col="black", size=2.75) +
geom_segment(data=cbind(EBCB, as.factor(BCB$branch)),
aes(x=x1, y=y1, xend=x2, yend=y2, col=as.factor(BCB$branch)), size=2) +
geom_point(data=df[V(BCB$B)$name,], fill=BCB$col[V(BCB$B)$name], size=5, pch=21) +
scale_color_manual(values=BCB$palette) +
guides(col = guide_legend(title="Path")) +
coord_fixed() +
theme_bw()
# Load libraries
devtools::load_all() # load BCB
library("tidyverse") # read RDS files
dataset1 <- dynwrap::example_dataset
dataset4 <- readRDS("Data/Cell/Real/cellbench-SC1_luyitian")
# Load libraries
devtools::load_all() # load BCB
# Load and plot data
G <- simplify(graph_from_data_frame(read.table("Data/HarryPotter/relations.csv", header=TRUE, sep=",",
col.names = c("potter1", "potter2", "type")),
directed=FALSE))
G <- read.table("Data/HarryPotter/relations.csv", header=TRUE, sep=",", col.names = c("from", "to", "weight"))
G <- G[G[,"weight"] != "-", 1:2]
G <- simplify(graph_from_data_frame(G, directed=FALSE))
V(G)$name <- as.character(read.table("Data/HarryPotter/characters.csv", quote="", header=TRUE, sep=",")[as.integer(V(G)$name) + 1, 2])
V(G)$name[V(G)$name == "\"Bartemius \"\"Barty\"\" Crouch Jr.\""] <- "Bartemius Crouch Jr."
V(G)$name[V(G)$name == "\"Bartemius \"\"Barty\"\" Crouch Sr.\""] <- "Bartemius Crouch Sr."
set.seed(17)
layout <- layout_with_graphopt(G)
small_component1 <- which(V(G)$name %in% c("Petunia Dursley", "Vernon Dursley", "Dudley Dursley"))
small_component2 <- which(V(G)$name %in% c("Tom Riddle Sr.", "Mary Riddle"))
layout[V(G)$name=="Albus Dumbledore", 1] <- layout[V(G)$name=="Albus Dumbledore", 1] - 5
layout[small_component1, 1] <- layout[small_component1, 1] - 250
layout[small_component1, 2] <- layout[small_component1, 2] - 75
layout[small_component2, 1] <- layout[small_component2, 1] - 300
layout[small_component2, 2] <- layout[small_component2, 2] - 25
plot(G, layout=layout, vertex.label=gsub(" ", "\n", V(G)$name), vertex.shape=V(G)$shape,
vertex.frame.color="gray", vertex.label.color="black", vertex.label.cex=0.8, edge.arrow.size=0.5,
edge.color=E(G)$color, edge.lty=E(G)$lty)
# Conduct backbone pipeline with ordinary LCC
old <- Sys.time()
f <- transitivity(G, type="local")
new <- Sys.time() - old
print(paste("Local cluster coefficients obtained in", round(new, 3), attr(new, "units")))
f[degree(G) == 1] <- 1
LCCB <- backbone(G, f=f)
# View LCC and LCC-pine
color_breaks <- c("blue", "green", "yellow")
V(G)$color <- adjustcolor(colorRampPalette(color_breaks)(length(f))[rank(f, ties.method="max")], 0.5)
frame.color <- rep("black", length(V(G)))
frame.color[V(G)$name %in% V(LCCB$B)$name] <- "red"
legend_colors <- adjustcolor(colorRampPalette(color_breaks)(length(f)), 0.5)
legend_image <- rev(as.raster(matrix(legend_colors, ncol = 1)))
E(G)$color <- rep("gray", length(E(G)))
E(G)$color[get.edge.ids(G, t(ends(LCCB$pine, E(LCCB$pine))))] <- adjustcolor("blue", 0.35)
E(G)$color[get.edge.ids(G, t(ends(LCCB$B, E(LCCB$B))))] <- adjustcolor("red", 0.5)
edge.width <- rep(0.75, length(E(G)))
edge.width[get.edge.ids(G, t(ends(LCCB$pine, E(LCCB$pine))))] <- 1
edge.width[get.edge.ids(G, t(ends(LCCB$B, E(LCCB$B))))] <- 4
labels <- c("Harry Potter", "Ron Weasley", "Hermione Granger", "Severu Snape", "Albus Dumbledore", "James Potter", "Lily Potter",
"Neville Longbottom", "Bartemius Crouch Jr.", "Lord Voldemort", "Lucius Malfoy", "Draco Malfoy",
"Bartemius Crouch Sr.", "Igor Karkaroff", "Olympe Maxime", "Fluffy", "Aragog", "Mary Riddle", "Tom Riddle Sr.",
"Rubeus Hagrid", "Dobby", "Cedric Diggory", "Sirius Black", "George Weasley", "Luna Lovegood", "Vernon Dursley", "Dudley Dursley",
"Petunia Dursley", "Hedwig", "Moaning Myrtle", "Severus Snape", "Vincent Crabbe Sr.")
labelsI <- which(V(G)$name %in% labels)
charactersInPlot <- V(G)$name
charactersInPlot[-labelsI] <- ""
vertex.size <- rep(7, length(V(G)))
vertex.size[-labelsI] <- 1
layout(matrix(1:2, ncol=2), width=c(3, 1), height=c(1, 1))
plot(G, layout=layout, dge.width=edge.width, vertex.size=vertex.size, vertex.label.cex=1.25, vertex.label.color="black",
vertex.frame.color=frame.color, vertex.label.font=2, asp=0, vertex.label=charactersInPlot)
plot(c(0,2), c(0,1), type="n", axes=FALSE, xlab="", ylab="", main="LCC")
text(x=1.5, y = seq(0, 1, l=5), labels=round(seq(min(f), max(f), l=5), 2), cex=1.5)
rasterImage(legend_image, 0, 0, 1, 1)
dev.off()
# Quantitative measures backbone
MSB <- medoids_steiner_backbone(G, c(2, 1, 2))
FPSB <- furthest_point_backbone(G, c(2, 1, 2))
MSTB <- MST_backbone(G, c(2, 1, 2))
backbones_evaluate(list(MSB, FPSB, MSTB, LCCB$B), G)
# Check for cycles in the backbone
LCCB <- check_for_cycles(LCCB, G=G)
op <- par(mar = c(3.25, 3.25, 1, 1))
TDA::plot.diagram(LCCB$diagram, diagLim=c(0, 3))
legend(2, 1.5, legend=c("H0", "H1"), col=c("black", "red"), pch=c(19, 2), pt.lwd=2, box.lty=0)
par(op)
Ecocycles <- do.call("rbind", LCCB$repCycles)
GwithRepCycle <- add_edges(G, as.character(t(Ecocycles)))
E(GwithRepCycle)$color[is.na(E(GwithRepCycle)$color)] <- adjustcolor("orange")
new.edge.width <- c(edge.width, rep(3, nrow(Ecocycles)))
layout(matrix(1:2, ncol=2), width=c(3, 1), height=c(1, 1))
plot(GwithRepCycle, layout=layout, edge.width=new.edge.width, vertex.size=vertex.size, vertex.label.cex=1.25, vertex.label.color="black",
vertex.frame.color=frame.color, vertex.label.font=2, asp=0, vertex.label=charactersInPlot)
plot(c(0,2), c(0,1), type="n", axes=FALSE, xlab="", ylab="", main="LCC")
text(x=1.5, y = seq(0, 1, l=5), labels=round(seq(min(f), max(f), l=5), 2), cex=1.5)
rasterImage(legend_image, 0, 0, 1, 1)
dev.off()
