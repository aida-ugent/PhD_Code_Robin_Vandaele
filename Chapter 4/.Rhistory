eps <- 3
vr.S <- VRgraph(D.S, eps)
E <- sapply(E(vr.S), function(e) as.vector(get.edges(vr.S, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.S[e[1],], df.S[e[2],]))), ncol = 4, byrow = TRUE))
ggplot(df.S, aes(x = V1, y = V2)) + coord_fixed() +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4),
color = 'red') + geom_point(size = 3, alpha = 0.25)
# Classify and visualize local-global topologies
start_time <- Sys.time()
lg.S <- classLG(vr.S, 3)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.S.text <- paste("(", lg.S$degree, ", ", lg.S$cycles, ")", sep = "")
ggplot(cbind(df.S, lg.S.text), aes(x = V1, y = V2, colour = lg.S.text)) +
geom_point(size = 3) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
# Construct underlying graph topology
start_time <- Sys.time()
GT.S <- constructGT(df.S, vr.S, lg.S, D.S, 3, method = "complete")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.S), function(e) as.vector(get.edges(GT.S, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.S[GT.S$centers[e[1]],], df.S[GT.S$centers[e[2]],]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.S, lg.S.text, GT.S$membership), aes(x = V1, y = V2)) +
geom_point(size = 3, aes(shape = lg.S.text, colour = GT.S$membership)) +
geom_point(data = df.S[GT.S$centers,], col = 'black', size = 3) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4))
# Divide long branch into consecutive components
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
traceback()
source("R/splitBranch.R")
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
source("R/splitBranch.R")
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
rm(list=ls())
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.S <- read.table("Data/Toy/spiral.csv", sep = ",")
ggplot(df.S, aes(x = V1, y = V2)) + geom_point() + coord_fixed()
# Construct and visualize Vietoris-Rips graph from data
D.S <- dist(df.S)
eps <- 3
vr.S <- VRgraph(D.S, eps)
E <- sapply(E(vr.S), function(e) as.vector(get.edges(vr.S, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.S[e[1],], df.S[e[2],]))), ncol = 4, byrow = TRUE))
ggplot(df.S, aes(x = V1, y = V2)) + coord_fixed() +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4),
color = 'red') + geom_point(size = 3, alpha = 0.25)
# Classify and visualize local-global topologies
start_time <- Sys.time()
lg.S <- classLG(vr.S, 3)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.S.text <- paste("(", lg.S$degree, ", ", lg.S$cycles, ")", sep = "")
ggplot(cbind(df.S, lg.S.text), aes(x = V1, y = V2, colour = lg.S.text)) +
geom_point(size = 3) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
# Construct underlying graph topology
start_time <- Sys.time()
GT.S <- constructGT(df.S, vr.S, lg.S, D.S, 3, method = "complete")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.S), function(e) as.vector(get.edges(GT.S, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.S[GT.S$centers[e[1]],], df.S[GT.S$centers[e[2]],]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.S, lg.S.text, GT.S$membership), aes(x = V1, y = V2)) +
geom_point(size = 3, aes(shape = lg.S.text, colour = GT.S$membership)) +
geom_point(data = df.S[GT.S$centers,], col = 'black', size = 3) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4))
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
GT
GT.S
source("R/splitBranch.R")
GT.S <- splitBranch(GT.S, vr.S, D.S, 3, 30)
E <- sapply(E(GT.S), function(e) as.vector(get.edges(GT.S, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.S[GT.S$centers[e[1]], 1:2], df.S[GT.S$centers[e[2]], 1:2]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.S, lg.S.text, GT.S$membership), aes(x = V1, y = V2)) +
geom_point(size = 3, aes(shape = lg.S.text, colour = GT.S$membership)) +
geom_point(data = df.S[GT.S$centers,], size = 4) +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4), size = 2, alpha = 0.5) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
df.G <- read.table("Data/df_Graph.csv", header = TRUE, sep = ",")
df.G[,1] <- NULL
ggplot(df.G, aes(x = x, y = y)) + geom_point() + coord_fixed()
rm(list=ls())
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.E <- read.table("df_Ellipse.csv", header = TRUE, sep = ",")
df.E[,1] <- NULL
ggplot(df.E, aes(x = x, y = y)) + geom_point() + coord_fixed()
df.E <- read.table("Data/Toy/df_Ellipse.csv", header = TRUE, sep = ",")
df.E[,1] <- NULL
ggplot(df.E, aes(x = x, y = y)) + geom_point() + coord_fixed()
D.E <- dist(df.E)
eps <- 0.3
vr.E <- VRgraph(D.E, eps)
E <- sapply(E(vr.E), function(e) as.vector(get.edges(vr.E, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.E[e[1],], df.E[e[2],]))), ncol = 4, byrow = TRUE))
ggplot(df.E, aes(x = x, y = y)) + coord_fixed() +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4),
color = 'red') + geom_point(size = 3, alpha = 0.25)
start_time <- Sys.time()
lg.E <- classLG(vr.E, 2)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.E.text <- paste("(", lg.E$degree, ", ", lg.E$cycles, ")", sep = "")
ggplot(cbind(df.E, lg.E.text), aes(x = x, y = y, colour = lg.E.text)) +
geom_point(size = 3) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
start_time <- Sys.time()
GT.E <- constructGT(df.E, vr.E, lg.E, D.E, 6, method = "complete")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.E), function(e) as.vector(get.edges(GT.E, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.E[GT.E$centers[e[1]],], df.E[GT.E$centers[e[2]],]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.E, lg.E.text, GT.E$membership), aes(x = x, y = y)) +
geom_point(size = 3, aes(shape = lg.E.text, colour = GT.E$membership)) +
geom_point(data = df.E[GT.E$centers,], col = 'black', size = 3) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4))
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.Y <- read.table("Data/Toy/toyY.csv", header = FALSE, sep = ",")
colnames(df.Y) <- c("x", "y")
ggplot(df.Y, aes(x = x, y = y)) + geom_point() + coord_fixed()
df.Y <- read.table("Data/Toy/toyY.csv", header = FALSE, sep = ",")
df.Y <- read.table("Data/Toy/ToyY.csv", header = FALSE, sep = ",")
colnames(df.Y) <- c("x", "y")
ggplot(df.Y, aes(x = x, y = y)) + geom_point() + coord_fixed()
D.Y <- dist(df.Y)
eps <- 15
vr.Y <- VRgraph(D.Y, eps)
E <- sapply(E(vr.Y), function(e) as.vector(get.edges(vr.Y, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.Y[e[1],], df.Y[e[2],]))), ncol = 4, byrow = TRUE))
ggplot(df.Y, aes(x = x, y = y)) + coord_fixed() +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4),
color = 'red') + geom_point(size = 3, alpha = 0.25)
start_time <- Sys.time()
lg.Y <- classLG(vr.Y, 3)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.Y.text <- paste("(", lg.Y$degree, ", ", lg.Y$cycles, ")", sep = "")
ggplot(cbind(df.Y, lg.Y.text), aes(x = x, y = y, colour = lg.Y.text)) +
geom_point(size = 3) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
start_time <- Sys.time()
GT.Y <- constructGT(df.Y, vr.Y, lg.Y, D.Y, 4, method = "complete")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.Y), function(e) as.vector(get.edges(GT.Y, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.Y[GT.Y$centers[e[1]],], df.Y[GT.Y$centers[e[2]],]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.Y, lg.Y.text, GT.Y$membership), aes(x = x, y = y)) +
geom_point(size = 3, aes(shape = lg.Y.text, colour = GT.Y$membership)) +
geom_point(data = df.Y[GT.Y$centers,], size = 5) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4), size = 3, alpha = 1)
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.stems <- read.table("Data/Cells/stemcells.csv", header = TRUE, sep = ";")
df.stems.pca <- prcomp(df.stems[,-6], center = TRUE, scale. = TRUE)$x
df.stems.pca <- cbind(data.frame(df.stems.pca), df.stems$label)
colnames(df.stems.pca)[6] <- "label"
ggplot(df.stems.pca, aes(x = PC1, y = PC2, col = label)) +
geom_point(size = 5) + coord_fixed() + theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 25), legend.title = element_text(size = 25),
legend.position = c(0.117, 0.15), legend.key.size = unit(1.5, 'lines')) +
guides(colour = guide_legend(override.aes = list(size = 5), title = "Cell type")) +
scale_color_manual(breaks = c("LT-HSC", "ST-HSC", "CMP", "CLP"),
values = c("red", "yellow", "blue", "cyan"))
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.stems <- read.table("Data/Cells/stemcells.csv", header = TRUE, sep = ";")
df.stems.pca <- prcomp(df.stems[,-6], center = TRUE, scale. = TRUE)$x
df.stems.pca <- cbind(data.frame(df.stems.pca), df.stems$label)
colnames(df.stems.pca)[6] <- "label"
ggplot(df.stems.pca, aes(x = PC1, y = PC2, col = label)) +
geom_point(size = 5) + coord_fixed() + theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 25), legend.title = element_text(size = 25),
legend.position = c(0.117, 0.15), legend.key.size = unit(1.5, 'lines')) +
guides(colour = guide_legend(override.aes = list(size = 5), title = "Cell type")) +
scale_color_manual(breaks = c("LT-HSC", "ST-HSC", "CMP", "CLP"),
values = c("red", "yellow", "blue", "cyan"))
# Construct Vietoris-Rips graph from data
eps <- 2
D.stems <- dist(df.stems[,-6])
vr.stems <- VRgraph(D.stems, eps)
# Classify and visualize local-global topologies
start_time <- Sys.time()
lg.stems <- classLG(vr.stems, 2)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.stems.text <- paste("(", lg.stems$degree, ", ", lg.stems$cycles, ")", sep = "")
ggplot(cbind(df.stems.pca, lg.stems.text), aes(x = PC1, y = PC2, colour = lg.stems.text)) +
geom_point(size = 5) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.text = element_text(size = 25), legend.title = element_text(size = 25),
legend.position = c(0.2, 0.1), legend.key.size = unit(1.5, 'lines'))
# Construct underlying graph topology
start_time <- Sys.time()
GT.stems <- constructGT(df.stems, vr.stems, lg.stems, D.stems, 4, method = "mcquitty")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.stems), function(e) as.vector(get.edges(GT.stems, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(df.stems.pca[GT.stems$centers[e[1]], 1:2],
df.stems.pca[GT.stems$centers[e[2]], 1:2]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(df.stems.pca, lg.stems.text, GT.stems$membership), aes(x = PC1, y = PC2)) +
geom_point(size = 5, aes(shape = lg.stems.text, colour = GT.stems$membership)) +
geom_point(data = df.stems.pca[GT.stems$centers,], col = 'black', size = 4) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4), size = 2) +
theme(legend.text = element_text(size = 25), legend.title = element_text(size = 25),
legend.position = "right", legend.key.size = unit(1.5, 'lines'))
start_time <- Sys.time()
stems.mapper <- mapper(
dist_object = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
stems.graph <- graph.adjacency(stems.mapper$adjacency, mode = "undirected")
MapperNodes <- mapperVertices(stems.mapper, 1:nrow(df.stems))
MapperLinks <- mapperEdges(stems.mapper)
forceNetwork(Nodes = MapperNodes, Links = MapperLinks,
Source = "Linksource", Target = "Linktarget",
Value = "Linkvalue", NodeID = "Nodename",
Group = "Nodegroup", opacity = 1,
linkDistance = 10, charge = -400,
Nodesize = "Nodesize")
library("TDAmapper")
install.packages("TDAmapper")
library("TDAmapper")
start_time <- Sys.time()
stems.mapper <- mapper(
dist_object = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
end_time <- Sys.time()
library("TDAmapper")
start_time <- Sys.time()
stems.mapper <- mapper(
dist_object = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
end_time <- Sys.time()
stems.mapper <- mapper2D(
dist_object = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
stems.mapper <- mapper2D(
distance_matrix = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
start_time <- Sys.time()
stems.mapper <- mapper1D(
distance_matrix = dist(df.stems[,-6]),
filter_values = df.stems.pca[,1],
num_intervals = 10,
percent_overlap = 50,
num_bins_when_clustering = 10)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
stems.graph <- graph.adjacency(stems.mapper$adjacency, mode = "undirected")
MapperNodes <- mapperVertices(stems.mapper, 1:nrow(df.stems))
stems.mapper
names(stems.mapper)
stems.mapper$vertices_in_level
names(stems.mapper)
# Vizualize groups on PCA plot
I <- unlist(stems.mapper$points_in_level_set)
groups <- factor(unlist(sapply(1:length(stems.mapper$points_in_level), function(i){
rep(i, length(stems.mapper$points_in_level_set[[i]]))
})))
ggplot(df.stems.pca[I,], aes(x = PC1, y = PC2, col = groups)) +
geom_point() + coord_fixed()
# Vizualize groups on PCA plot
I <- unlist(stems.mapper$points_in_level)
groups <- factor(unlist(sapply(1:length(stems.mapper$points_in_level), function(i){
rep(i, length(stems.mapper$points_in_level_set[[i]]))
})))
ggplot(df.stems.pca[I,], aes(x = PC1, y = PC2, col = groups)) +
geom_point() + coord_fixed()
I
groups
groups <- factor(unlist(sapply(1:length(stems.mapper$points_in_level), function(i){
rep(i, length(stems.mapper$points_in_level[[i]]))
})))
ggplot(df.stems.pca[I,], aes(x = PC1, y = PC2, col = groups)) +
geom_point() + coord_fixed()
# Vizualize branches and bifurcation area on PCA plot
I1 <- unique(unlist(stems.mapper$points_in_vertex[1:8]))
I2 <- stems.mapper$points_in_vertex[[9]]
I3 <- stems.mapper$points_in_vertex[[10]]
I4 <- stems.mapper$points_in_vertex[[11]]
groups <- factor(c(rep(1, length(I1)), rep(2, length(I2)),
rep(3, length(I3)), rep(4, length(I4))))
ggplot(df.stems.pca[c(I1, I2, I3, I4),], aes(x = PC1, y = PC2, col = groups)) +
geom_point(size = 5) + coord_fixed() + theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 25), legend.title = element_text(size = 20),
legend.position = "right", legend.key.size = unit(1.5, 'lines'))
names(stems.mapper)
g1 <- graph.adjacency(stems.mapper$adjacency, mode="undirected")
plot(g1, layout = layout.auto(g1) )
plot(graph.adjacency(stems.mapper$adjacency, mode="undirected")
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.EQ <- rbind(read.table("Data/Earthquakes/query1.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query2.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query3.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query4.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query5.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query6.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query7.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE))
ggplot(df.EQ, aes(x = longitude, y = latitude)) + geom_point() + coord_fixed()
df.EQ$longitude <- sapply(df.EQ$longitude, function(l){
if(l < 0) return(l + 360) else return(l)
})
I <- (df.EQ$mag > 6.5 & df.EQ$longitude > 140 & df.EQ$longitude < 315 &
df.EQ$latitude < 65 & df.EQ$latitude > -75)
ggplot(df.EQ[I,], aes(x = longitude, y = latitude)) + geom_point() + coord_fixed()
DTM <- dtm(X = df.EQ[I, c("longitude", "latitude")],
Grid = df.EQ[I, c("longitude", "latitude")], m0 = 0.1)
J <- DTM < 30
ggplot(cbind(df.EQ[I,][J,], DTM[J]), aes(x = longitude, y = latitude, col = DTM[J])) +
geom_point() + coord_fixed()
p_df.EQ <- df.EQ[I, c("longitude", "latitude")][J,]
library("gsubfn")
df.EQ$longitude <- sapply(df.EQ$longitude, function(l){
if(l < 0) return(l + 360) else return(l)
})
I <- (df.EQ$mag > 6.5 & df.EQ$longitude > 140 & df.EQ$longitude < 315 &
df.EQ$latitude < 65 & df.EQ$latitude > -75)
ggplot(df.EQ[I,], aes(x = longitude, y = latitude)) + geom_point() + coord_fixed()
DTM <- dtm(X = df.EQ[I, c("longitude", "latitude")],
Grid = df.EQ[I, c("longitude", "latitude")], m0 = 0.1)
### Set-up ###
# Set working directory (change accordingly)
setwd("~/Documents/PhD_code/Chapter 4")
# Load libraries
library("ggplot2")
library("igraph")
library("TDA")
# Source functions
for(file in list.files("R")){
source(file.path("R", file))
}
# Load and plot data
df.EQ <- rbind(read.table("Data/Earthquakes/query1.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query2.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query3.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query4.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query5.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query6.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE),
read.table("Data/Earthquakes/query7.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE))
ggplot(df.EQ, aes(x = longitude, y = latitude)) + geom_point() + coord_fixed()
# Preprocess data
df.EQ$longitude <- sapply(df.EQ$longitude, function(l){
if(l < 0) return(l + 360) else return(l)
})
I <- (df.EQ$mag > 6.5 & df.EQ$longitude > 140 & df.EQ$longitude < 315 &
df.EQ$latitude < 65 & df.EQ$latitude > -75)
ggplot(df.EQ[I,], aes(x = longitude, y = latitude)) + geom_point() + coord_fixed()
DTM <- dtm(X = df.EQ[I, c("longitude", "latitude")],
Grid = df.EQ[I, c("longitude", "latitude")], m0 = 0.1)
J <- DTM < 30
ggplot(cbind(df.EQ[I,][J,], DTM[J]), aes(x = longitude, y = latitude, col = DTM[J])) +
geom_point() + coord_fixed()
p_df.EQ <- df.EQ[I, c("longitude", "latitude")][J,]
D.EQ <- dist(p_df.EQ)
eps <- 10
vr.EQ <- VRgraph(D.EQ, eps)
E <- sapply(E(vr.EQ), function(e) as.vector(get.edges(vr.EQ, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(p_df.EQ[e[1],], p_df.EQ[e[2],]))), ncol = 4, byrow = TRUE))
ggplot(p_df.EQ, aes(x = longitude, y = latitude)) + coord_fixed() +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4),
color = 'red') + geom_point(size = 3, alpha = 0.25)
start_time <- Sys.time()
lg.EQ <- classLG(vr.EQ, 2)
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
lg.EQ.text <- paste("(", lg.EQ$degree, ", ", lg.EQ$cycles, ")", sep = "")
ggplot(cbind(p_df.EQ, lg.EQ.text), aes(x = longitude, y = latitude, colour = lg.EQ.text)) +
geom_point(size = 3) + theme_bw(base_size = 15) +
coord_fixed() + guides(colour = guide_legend("(Degree, Cycles)")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
start_time <- Sys.time()
GT.EQ <- constructGT(p_df.EQ, vr.EQ, lg.EQ, D.EQ, 2, method = "complete")
end_time <- Sys.time()
message(paste("time: ", toString(end_time - start_time), "s", sep = ""))
E <- sapply(E(GT.EQ), function(e) as.vector(get.edges(GT.EQ, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(p_df.EQ[GT.EQ$centers[e[1]], 1:2],
p_df.EQ[GT.EQ$centers[e[2]], 1:2]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(p_df.EQ, lg.EQ.text, GT.EQ$membership), aes(x = longitude, y = latitude)) +
geom_point(size = 3, aes(shape = lg.EQ.text, colour = GT.EQ$membership)) +
geom_point(data = p_df.EQ[GT.EQ$centers,], size = 4) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4), size = 2, alpha = 0.5)
GT.EQ <- splitBranch(GT.EQ, vr.EQ, D.EQ, 8, 15)
GT.EQ <- splitBranch(GT.EQ, vr.EQ, D.EQ, 7, 5)
E <- sapply(E(GT.EQ), function(e) as.vector(get.edges(GT.EQ, e)))
E <- data.frame(matrix(unlist(apply(E, 2, function(e)
cbind(p_df.EQ[GT.EQ$centers[e[1]], 1:2],
p_df.EQ[GT.EQ$centers[e[2]], 1:2]))),
ncol = 4, byrow = TRUE))
ggplot(cbind(p_df.EQ, lg.EQ.text, GT.EQ$membership), aes(x = longitude, y = latitude)) +
geom_point(size = 3, aes(shape = lg.EQ.text, colour = GT.EQ$membership)) +
geom_point(data = p_df.EQ[GT.EQ$centers,], size = 4, alpha = 0.5) +
geom_segment(data = E, aes(x = X1, y = X2, xend = X3, yend = X4), size = 2, alpha = 0.5) +
theme_bw(base_size = 15) + coord_fixed() +
guides(shape = guide_legend("(Degree, Cycles)"), colour = guide_legend("Cluster")) +
theme(legend.position = "bottom", legend.direction = "horizontal")
